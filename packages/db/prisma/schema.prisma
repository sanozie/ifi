// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Explicit binary targets to ensure compatible engines on Render (OpenSSL 3.0)
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Thread {
  id        String    @id @default(cuid())
  title     String
  userId    String?
  status    String    @default("active") // active | completed | abandoned
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  messages  Message[]
  embeddings Embedding[]
  specs     Spec[]
  jobs      Job[]
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([createdAt(sort: Desc)])
  @@index([userId])
  @@index([status])
}

model Message {
  id        String    @id @default(cuid())
  threadId  String
  role      String
  content   String    @db.Text
  createdAt DateTime  @default(now())
  metadata  Json?
  provider  String?
  tokensPrompt     Int?
  tokensCompletion Int?
  costUsd  Float?
  
  // Relations
  thread    Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  embeddings Embedding[]

  @@index([threadId])
  @@index([createdAt])
}

model Spec {
  id        String   @id @default(cuid())
  threadId  String
  version   Int      @default(1)
  title     String
  content   String   @db.Text
  status    String   @default("drafting") // drafting | ready | sent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  jobs      Job[]

  @@index([threadId])
  @@index([status])
}

model Job {
  id            String   @id @default(cuid())
  userId        String?
  threadId      String?
  specId        String?
  status        String
  repo          String
  baseBranch    String?  @default("main")
  featureBranch String?
  prUrl         String?
  error         String?  @db.Text
  costsJson     Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  thread Thread? @relation(fields: [threadId], references: [id])
  spec   Spec?   @relation(fields: [specId], references: [id])
  pullRequests PullRequest[]

  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@index([userId])
  @@index([threadId])
}

model Embedding {
  id        String    @id @default(cuid())
  threadId  String?
  messageId String?
  vector    Unsupported("vector(1536)")
  createdAt DateTime  @default(now())
  
  // Relations
  thread    Thread?   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  message   Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([messageId])
}

model User {
  id       String   @id @default(cuid())
  clerkId  String?  @unique
  email    String?  @unique
  createdAt DateTime @default(now())

  // Relations
  threads  Thread[]
  jobs     Job[]
  deviceTokens DeviceToken[]
}

model PullRequest {
  id         String   @id @default(cuid())
  jobId      String
  repo       String
  prNumber   Int
  url        String
  status     String
  headBranch String
  baseBranch String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
}

model DeviceToken {
  id         String   @id @default(cuid())
  userId     String
  platform   String   @default("ios")
  token      String   @unique
  createdAt  DateTime @default(now())
  lastSeenAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
