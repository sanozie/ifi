// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // Explicit binary targets to ensure compatible engines on Render (OpenSSL 3.0)
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "fullTextSearch"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Thread {
  id        String   @id @default(cuid())
  title     String
  status    String   @default("active") // legacy status (kept for back-compat)
  // New lifecycle state for multi-spec workflow
  // planning | working | waiting_for_feedback | archived
  state     String   @default("planning")
  // Track the active PR (if any) so planner can fetch / update it
  currentPrBranch String?
  currentPrUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages   Message[]
  embeddings Embedding[]
  specs      Spec[]
  jobs       Job[]

  @@index([createdAt(sort: Desc)])
  @@index([status])
  @@index([state])
}

model Message {
  id               String   @id @default(cuid())
  threadId         String
  role             String
  content          String   @db.Text
  createdAt        DateTime @default(now())
  metadata         Json?
  provider         String?
  tokensPrompt     Int?
  tokensCompletion Int?
  costUsd          Float?

  // Relations
  thread     Thread      @relation(fields: [threadId], references: [id], onDelete: Cascade)
  embeddings Embedding[]

  @@index([threadId])
  @@index([createdAt])
}

model Spec {
  id        String   @id @default(cuid())
  threadId  String
  version   Int      @default(1)
  title     String
  content   String   @db.Text
  // initial | update
  specType     String   @default("initial")
  // Branch this spec targets (e.g. feature branch of open PR)
  targetBranch String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  jobs   Job[]

  @@index([threadId])
  @@index([specType])
}

model Job {
  id        String   @id @default(cuid())
  threadId  String?
  specId    String?
  status    String
  prUrl     String?
  error     String?  @db.Text
  costsJson Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread        Thread?      @relation(fields: [threadId], references: [id])
  spec          Spec?        @relation(fields: [specId], references: [id])
  pullRequest   PullRequest? @relation(fields: [pullRequestId], references: [id])
  pullRequestId String?      @unique

  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@index([threadId])
}

model Embedding {
  id        String                      @id @default(cuid())
  threadId  String?
  messageId String?
  vector    Unsupported("vector(1536)")
  createdAt DateTime                    @default(now())

  // Relations
  thread  Thread?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([messageId])
}

model PullRequest {
  id         String   @id @default(cuid())
  jobId      String
  repo       String
  prNumber   Int
  url        String
  status     String
  headBranch String
  baseBranch String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  job Job?

  @@index([jobId])
  @@index([status])
}

model DeviceToken {
  id         String    @id @default(cuid())
  platform   String    @default("ios")
  token      String    @unique
  createdAt  DateTime  @default(now())
  lastSeenAt DateTime?
}
