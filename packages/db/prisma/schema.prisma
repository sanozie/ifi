// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // Explicit binary targets to ensure compatible engines on Render (OpenSSL 3.0)
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "fullTextSearch"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Thread {
  id              String   @id @default(cuid())
  title           String
  // New lifecycle state for multi-spec workflow
  // planning | working | waiting_for_feedback | archived
  state           String   @default("planning")
  chat            Json
  // Track the active PR (if any) so planner can fetch / update it
  currentPrBranch String?
  currentPrUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  specs Spec[]
  jobs  Job[]

  @@index([createdAt(sort: Desc)])
  @@index([state])
}

model Spec {
  id           String   @id @default(cuid())
  threadId     String
  version      Int      @default(1)
  title        String
  content      String   @db.Text
  // initial | update
  specType     String   @default("initial")
  // Branch this spec targets (e.g. feature branch of open PR)
  targetBranch String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  jobs   Job[]

  @@index([threadId])
  @@index([specType])
}

model Job {
  id        String   @id @default(cuid())
  threadId  String?
  specId    String?
  status    String
  prUrl     String?
  error     String?  @db.Text
  costsJson Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread Thread? @relation(fields: [threadId], references: [id])
  spec   Spec?   @relation(fields: [specId], references: [id])

  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@index([threadId])
}
