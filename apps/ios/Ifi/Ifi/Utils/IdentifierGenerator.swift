//
//  IdentifierGenerator.swift
//  Ifi
//
//  Created on 8/26/25.
//

import Foundation

/// Type alias for identifier values
public typealias IdentifierValue = String

/// Protocol for generating unique identifiers
public protocol IdentifierGenerator {
    /// Type of identifiers generated
    typealias ID = IdentifierValue
    
    /// Generates a new unique identifier
    /// - Returns: A unique identifier
    func callAsFunction() -> ID
    
    /// Creates a nested generator that produces hierarchical identifiers
    /// - Returns: A new generator that creates IDs within the parent's namespace
    func nested() -> IdentifierGenerator
}

/// Generates incremental, hierarchical identifiers with thread safety
public final class IncrementalIdentifierGenerator: IdentifierGenerator {
    /// The prefix for identifiers generated by this instance
    private let prefix: String
    
    /// Counter for generating sequential identifiers
    private var counter: Int
    
    /// Lock for thread-safe access to the counter
    private let lock = NSLock()
    
    /// Creates a new identifier generator with the specified prefix
    /// - Parameter prefix: The prefix for generated identifiers
    private init(prefix: String = "") {
        self.prefix = prefix
        self.counter = 0
    }
    
    /// Factory method to create a new root generator
    /// - Returns: A new identifier generator
    public static func create() -> IdentifierGenerator {
        return IncrementalIdentifierGenerator()
    }
    
    /// Generates a new unique identifier
    /// - Returns: A unique identifier string
    public func callAsFunction() -> ID {
        lock.lock()
        defer { lock.unlock() }
        
        let id = "\(prefix)\(counter)"
        counter += 1
        return id
    }
    
    /// Creates a nested generator that produces hierarchical identifiers
    /// - Returns: A new generator that creates IDs within the parent's namespace
    public func nested() -> IdentifierGenerator {
        lock.lock()
        defer { lock.unlock() }
        
        let nestedPrefix = "\(prefix)\(counter)."
        counter += 1
        return IncrementalIdentifierGenerator(prefix: nestedPrefix)
    }
}
