name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and set Yarn 4.3.1
        run: |
          corepack enable
          corepack prepare yarn@4.3.1 --activate
          yarn --version

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Cache Yarn cache
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install dependencies
        run: YARN_ENABLE_SCRIPTS=false yarn install --immutable

  typecheck:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and set Yarn 4.3.1
        run: |
          corepack enable
          corepack prepare yarn@4.3.1 --activate
          yarn --version

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Cache Yarn cache
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install dependencies
        run: YARN_ENABLE_SCRIPTS=false yarn install --immutable

      - name: Generate Prisma client
        run: yarn workspace @ifi/db prisma generate

      - name: Run typecheck
        run: yarn typecheck

  providers-smoke:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and set Yarn 4.3.1
        run: |
          corepack enable
          corepack prepare yarn@4.3.1 --activate
          yarn --version

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Cache Yarn cache
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install dependencies
        run: YARN_ENABLE_SCRIPTS=false yarn install --immutable

      - name: Generate Prisma client
        run: yarn workspace @ifi/db prisma generate

      - name: Run providers smoke test
        run: yarn workspace @ifi/tools smoke

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and set Yarn 4.3.1
        run: |
          corepack enable
          corepack prepare yarn@4.3.1 --activate
          yarn --version

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Cache Yarn cache
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install dependencies
        run: YARN_ENABLE_SCRIPTS=false yarn install --immutable

      - name: Generate Prisma client
        run: yarn workspace @ifi/db prisma generate

      - name: Build packages
        run: yarn build

  docker-build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        run: docker build -f services/api/Dockerfile -t ifi-api:ci .

      - name: Build Worker image
        run: docker build -f services/worker/Dockerfile -t ifi-worker:ci .
